<?php

namespace CS\CustomersPlatformBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * CustomerUser
 *
 * @ORM\Table(name="customer_user")
 * @ORM\Entity(repositoryClass="CS\CustomersPlatformBundle\Repository\CustomerUserRepository")
 */
class CustomerUser
{
    /**
     * @var string
     * @Gedmo\Slug(fields={"email"})
     * @ORM\Column(name="confirmation_token", type="string", length=255, nullable=true)
     */
    private $confirmationToken;

    /**
     * @ORM\OneToMany(targetEntity="CS\CustomersPlatformBundle\Entity\Work", cascade={"persist"}, mappedBy="customerUser")
     * Attribut permettant de savoir quels rôles il joue dans l'application avec une certaine école
     */
    private $works;

    /**
     * @ORM\ManyToMany(targetEntity="CS\CustomersPlatformBundle\Entity\School", cascade={"persist"}, mappedBy="customerUsers")
     * Attribut permettant de savoir les écoles dans lesquelles il travaille
     */
    private $schools;


    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="email", type="string", length=255, unique=true)
     */
    private $email;

    /**
     * @var string
     *
     * @ORM\Column(name="password", type="string", length=255)
     */
    private $password;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="lastConnection", type="datetimetz", nullable=true)
     */
    private $lastConnection;

    /**
     * @var string
     *
     * @ORM\Column(name="firstName", type="string", length=255)
     */
    private $firstName;

    /**
     * @var string
     *
     * @ORM\Column(name="lastName", type="string", length=255)
     */
    private $lastName;

    /**
     * @var string
     *
     * @ORM\Column(name="telephone", type="string", length=255, nullable=true, unique=true)
     */
    private $telephone;

    /**
     * @var bool
     *
     * @ORM\Column(name="isActive", type="boolean")
     */
    private $isActive;


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set email
     *
     * @param string $email
     *
     * @return CustomerUser
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return CustomerUser
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set lastConnection
     *
     * @param \DateTime $lastConnection
     *
     * @return CustomerUser
     */
    public function setLastConnection($lastConnection)
    {
        $this->lastConnection = $lastConnection;

        return $this;
    }

    /**
     * Get lastConnection
     *
     * @return \DateTime
     */
    public function getLastConnection()
    {
        return $this->lastConnection;
    }

    /**
     * Set firstName
     *
     * @param string $firstName
     *
     * @return CustomerUser
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName
     *
     * @param string $lastName
     *
     * @return CustomerUser
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set telephone
     *
     * @param string $telephone
     *
     * @return CustomerUser
     */
    public function setTelephone($telephone)
    {
        $this->telephone = $telephone;

        return $this;
    }

    /**
     * Get telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->telephone;
    }

    /**
     * Set isActive
     *
     * @param boolean $isActive
     *
     * @return CustomerUser
     */
    public function setIsActive($isActive)
    {
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Get isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->isActive;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->works = new \Doctrine\Common\Collections\ArrayCollection();
        $this->setPassword($this->createPassword());
        $this->setIsActive(false);
    }

    /**
     * Add work
     *
     * @param \CS\CustomersPlatformBundle\Entity\Work $work
     *
     * @return CustomerUser
     */
    public function addWork(\CS\CustomersPlatformBundle\Entity\Work $work)
    {
        $this->works[] = $work;
        $work->setCustomerUser($this);

        return $this;
    }

    /**
     * Remove work
     *
     * @param \CS\CustomersPlatformBundle\Entity\Work $work
     */
    public function removeWork(\CS\CustomersPlatformBundle\Entity\Work $work)
    {
        $this->works->removeElement($work);
    }

    /**
     * Get works
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getWorks()
    {
        return $this->works;
    }

    /**
     * Add school
     *
     * @param \CS\CustomersPlatformBundle\Entity\School $school
     *
     * @return CustomerUser
     */
    public function addSchool(\CS\CustomersPlatformBundle\Entity\School $school)
    {
        $this->schools[] = $school;

        return $this;
    }

    /**
     * Remove school
     *
     * @param \CS\CustomersPlatformBundle\Entity\School $school
     */
    public function removeSchool(\CS\CustomersPlatformBundle\Entity\School $school)
    {
        $this->schools->removeElement($school);
    }

    /**
     * Get schools
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSchools()
    {
        return $this->schools;
    }

    private function createPassword()
    {
        $password = "";

        /* on random 10 chiffres ou lettres */
        for($i=0; $i<10; $i++)
        {
            $choice = rand(1,3);
            /* chiffre*/
            if($choice == 1)
            {
                $password.= rand(0,9);
            }elseif($choice == 2) /* lettres majuscules */
            {
                $number = rand(65,90);
                /* On concaténe l'equivalent en caractére ASCII */
                $password.= chr($number);
            }elseif($choice == 3)
            {
                $number = rand(97,122);
                /* On concaténe l'equivalent en caractére ASCII */
                $password.= chr($number);
            }
        }
        
        return $password;
    }
}
